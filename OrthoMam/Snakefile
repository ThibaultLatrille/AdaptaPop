import os
from ete3 import Tree
import pandas as pd
from Bio import SeqIO
CDS_START_LIST = 0
CDS_END_LIST = 1000

fasta_folder = "Datasets/omm_NT_fasta.v10c_116"
tree_folder = "Datasets/omm_RooTree.v10b_116"
experiment_folder = "Experiments"
bayescode_folder = "bayescode/_build"
CDS_list = list(sorted([i.replace(".fasta", "") for i in os.listdir(fasta_folder)]))[CDS_START_LIST:CDS_END_LIST]
MODELS = {"siteomega": "--omegashift 0.0 --freeomega --omegancat 30 --flatfitness",
          "sitemutsel": "--omegashift 0.0 --ncat 30"}
CHAINS = [1]
POINTS = 1000
BURN_IN = 200

localrules: all, filter, gzip_chain

rule all:
    input: expand(experiment_folder + "/{CDS}/{model}_{chain}.run.chain.gz", CDS=CDS_list, model=MODELS, chain=CHAINS)

rule filter:
    input:
        fasta = fasta_folder + "/{CDS}.fasta",
        tree = tree_folder + "/{CDS}.rootree"
    output:
        ali = experiment_folder + "/{CDS}/placnr.ali",
        tree = experiment_folder + "/{CDS}/placnr.rootree"
    run:
        assert(os.path.isfile(input.tree))
        tree = Tree(input.tree)
        species_to_discard = [i.split("_")[0].lower() for i in list(pd.read_csv("taxlist.tsv", sep="\t")["Name"])]
        orthomam_species = tree.get_leaf_names()
        species_to_keep = [s for s in orthomam_species if s.split("_")[0].lower() not in species_to_discard]
        tree.prune(species_to_keep, preserve_branch_length=True)
        assert (len(tree.get_leaf_names()) == len(species_to_keep))
        tree.write(outfile=output.tree, format=1)

        fasta_seqs = SeqIO.parse(open(input.fasta, 'r'), 'fasta')
        ids_seqs = [(fasta.id, str(fasta.seq)) for fasta in fasta_seqs if fasta.id.split("_")[0].lower() not in species_to_discard]

        assert len(ids_seqs) == len(tree.get_leaf_names())
        ali_file = open(output.ali, 'w')
        ali_file.write(str(len(ids_seqs)) + " " + str(len(ids_seqs[0][1])) + "\n")
        ali_file.write("\n".join([" ".join(id_seq) for id_seq in ids_seqs]))
        ali_file.close()

rule run_bayescode:
    input:
        ali = rules.filter.output.ali,
        tree = rules.filter.output.tree,
        bayescode = bayescode_folder + "/mutselomega"
    output: touch(experiment_folder + "/{CDS}/{model}_{chain}.run")
    params:
        time="3-23:00", mem=1000, threads=1, queue="normal", name=lambda w: w.CDS,
        cmd = lambda w: MODELS[w.model]
    shell: "{input.bayescode} -a {input.ali} -t {input.tree} {params.cmd} -u {POINTS} {output}"

rule read_bayescode:
    input:
        run = rules.run_bayescode.output,
        bayescode = bayescode_folder + "/readmutselomega"
    params:
        time="0-4:00", mem=1000, threads=1, queue="normal", name=lambda w: w.CDS, 
    output: touch(experiment_folder + "/{CDS}/{model}_{chain}.read")
    shell: "{input.bayescode} -b {BURN_IN} {input.run}"

rule gzip_chain:
    input:
        run = rules.run_bayescode.output,
        read = rules.read_bayescode.output
    output: experiment_folder + "/{CDS}/{model}_{chain}.run.chain.gz"
    shell: "gzip -f {input.run}.chain"
