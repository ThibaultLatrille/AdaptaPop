import os
import pandas as pd
import random
from ete3 import Tree
from Bio import SeqIO

configfile: 'config.yaml'

ROOT = os.path.abspath('..')
FOLDER = os.path.abspath('.')
FASTA_FOLDER = f"{FOLDER}/Datasets/omm_NT_fasta.v10c_116"
TREE_FOLDER = f"{FOLDER}/Datasets/omm_RooTree.v10b_116"
XML_FOLDER = f"{FOLDER}/Datasets/omm_markers"
EXP_FOLDER = f"{FOLDER}/Experiments"

bayescode_path = {}
for executable in ["mutselomega", "readmutselomega"]:
    exec_path = ""
    for b in ["BayesCode", "bayescode", "Bayescode", "bayesCode", "BAYESCODe", "BayesCODE"]:
        exec_path = os.path.join(ROOT, f'utils/{b}/bin/{executable}')
        if os.path.exists(exec_path):
            break
    if not os.path.exists(exec_path):
        # Find executable in the path using whereis. If not found, raise an error.
        split = os.popen(f'whereis {executable}').read().split()
        if len(split) > 1:
            exec_path = split[1].strip()
        else:
            raise FileNotFoundError(f'{executable} not found. Please install BayesCode and add it to your path.')
    bayescode_path[executable] = exec_path
    print(f"Found {executable} at {exec_path}")

mutsel_path = bayescode_path["mutselomega"]  # In case you want to specify the path to Bayescode bin folder
readmutsel_path = bayescode_path["readmutselomega"]  # In case you want to specify the path to Bayescode bin folder
CDS_list = list(sorted([i.replace(".fasta","") for i in os.listdir(FASTA_FOLDER)]))[
           config['CDS_START_LIST']:config['CDS_END_LIST']]
print(f"{len(CDS_list)} CDS found in {FASTA_FOLDER}.")
MODELS = {"siteomega": "--omegashift 0.0 --freeomega --omegancat 30 --flatfitness",
          "sitemutsel": "--omegashift 0.0 --ncat 30"}
POINTS = config['POINTS']
BURN_IN = config['BURN_IN']
run_bayescode = 'ONLY_CODEML' not in config or not config['ONLY_CODEML']

# random sample without replacement from a list
# Seed for reproducibility
CODEML_FOLDER = f"CODEML"
TEMPLATES_FOLDER = f"{FOLDER}/Templates"
random.seed(config['RANDOM_SEED'])
random.shuffle(CDS_list)
RD_SAMPLE_LIST = CDS_list[:config['CODEML_SAMPLES']]
print(f"{len(RD_SAMPLE_LIST)} CDS to process with CODEML.")
TEMPLATES = [i.replace(".ctl","") for i in os.listdir(TEMPLATES_FOLDER)]
print(f"Templates found: {', '.join(TEMPLATES)}.")

localrules: all,filter,inference,control_file,codeml_vs_bayescode,gene_table

rule all:
    input:
        f"{FOLDER}/GeneTable.csv.gz" if run_bayescode else [],
        expand(f"{FOLDER}/results/codeml_vs_bayescode.{{level}}.{{template}}.png",template=TEMPLATES,level=["gene", "site"]),

rule filter:
    input:
        fasta=f"{FASTA_FOLDER}/{{CDS}}.fasta",
        tree=f"{TREE_FOLDER}/{{CDS}}.rootree"
    output:
        ali=f"{EXP_FOLDER}/{{CDS}}/placnr.ali",
        tree=f"{EXP_FOLDER}/{{CDS}}/placnr.rootree"
    run:
        assert (os.path.isfile(input.tree))
        tree = Tree(input.tree)
        species_to_discard = [i.split("_")[0].lower() for i in list(pd.read_csv("taxlist.tsv",sep="\t")["Name"])]
        orthomam_species = tree.get_leaf_names()
        species_to_keep = [s for s in orthomam_species if s.split("_")[0].lower() not in species_to_discard]
        tree.prune(species_to_keep,preserve_branch_length=True)
        assert (len(tree.get_leaf_names()) == len(species_to_keep))
        tree.write(outfile=output.tree,format=1)

        fasta_seqs = SeqIO.parse(open(input.fasta,'r'),'fasta')
        ids_seqs = [(fasta.id, str(fasta.seq).replace("!","-").replace("?","-")) for fasta in fasta_seqs if
                    fasta.id.split("_")[0].lower() not in species_to_discard]

        assert len(ids_seqs) == len(tree.get_leaf_names())
        ali_file = open(output.ali,'w')
        ali_file.write(str(len(ids_seqs)) + " " + str(len(ids_seqs[0][1])) + "\n")
        ali_file.write("\n".join([" ".join(id_seq) for id_seq in ids_seqs]))
        ali_file.close()

rule run_bayescode:
    input:
        ali=f"{EXP_FOLDER}/{{CDS}}/placnr.ali",
        tree=f"{EXP_FOLDER}/{{CDS}}/placnr.rootree",
    output: touch(f"{EXP_FOLDER}/{{CDS}}/{{model}}_{{chain}}.run")
    params:
        time="3-23:00",mem=1000,threads=1,name=lambda wildcards: wildcards.CDS,
        unzip=lambda wildcards, output: "gunzip {0}.chain.gz &&".format(output) if config['RESTART'] else "",
        cmd=lambda wildcards, input: "-a {0} -t {1} -u {2} {3}".format(input.ali,input.tree,POINTS,
            MODELS[wildcards.model]) if not config['RESTART'] else ""
    shell: "{params.unzip} {mutsel_path} {params.cmd} {output} && gzip -f {output}.chain"

rule inference:
    input: expand(f"{EXP_FOLDER}/{{CDS}}/{{model}}_{{chain}}.run",CDS=CDS_list,model=MODELS,chain=config['CHAINS'])

rule read_bayescode:
    input:
        run=f"{EXP_FOLDER}/{{CDS}}/{{model}}_{{chain}}.run",
    params:
        time="0-10:00",mem=1000,threads=1,name=lambda wildcards: wildcards.CDS,
        nuc=lambda wildcards, input: f"{readmutsel_path} --every 1 --until {POINTS} --burnin {BURN_IN} --nuc {input.run}",
        ss=lambda wildcards, input: f"{readmutsel_path} --every 1 --until {POINTS} --burnin {BURN_IN} --ss {input.run}",
        read=lambda wildcards, input: " && ".join([
            f'{readmutsel_path} --every 1 --until {POINTS} --burnin {BURN_IN} {"--omega_0" if wildcards.model == "sitemutsel" else ""} -c {ci} {input.run}'
            for ci in [0.025, 0.0025]])
    output: touch(f"{EXP_FOLDER}/{{CDS}}/{{model}}_{{chain}}.read")
    shell: "gunzip {input.run}.chain.gz && {params.nuc} && {params.ss} && {params.read} && gzip -f {input.run}.chain"

rule control_file:
    input:
        ali=f"{EXP_FOLDER}/{{CDS}}/placnr.ali",
        tree=f"{EXP_FOLDER}/{{CDS}}/placnr.rootree",
        ctl=f"{TEMPLATES_FOLDER}/{{template}}.ctl",
        ali2fasta=f"{ROOT}/scripts/ali_2_fasta.py"
    output:
        fasta=f"{CODEML_FOLDER}/{{CDS}}_{{template}}/{{CDS}}.fasta",
        tree=f"{CODEML_FOLDER}/{{CDS}}_{{template}}/{{CDS}}.tree",
        ctl=f"{CODEML_FOLDER}/{{CDS}}_{{template}}/{{CDS}}.ctl"
    shell: "mkdir -p {CODEML_FOLDER}/{wildcards.CDS}_{wildcards.template};"
           "cp -f {input.tree} {output.tree};"
           "python3 {input.ali2fasta} -i {input.ali} -o {output.fasta};"
           "echo 'seqfile = {wildcards.CDS}.fasta' > {output.ctl};"
           "echo 'treefile = {wildcards.CDS}.tree' >> {output.ctl};"
           "echo 'outfile = {wildcards.CDS}' >> {output.ctl};"
           "cat {input.ctl} >> {output.ctl};"

rule codeml:
    input:
        ctl=rules.control_file.output.ctl,
    output:
        f"{CODEML_FOLDER}/{{CDS}}_{{template}}/{{CDS}}"
    params:
        time="2-23:00",mem=1000,threads=1,name=lambda wildcards: wildcards.CDS,
    shell: "cd {CODEML_FOLDER}/{wildcards.CDS}_{wildcards.template} && echo -ne '\\n' | codeml {wildcards.CDS}.ctl 1> {wildcards.CDS}.stdout 2> {wildcards.CDS}.stderr || true"

rule codeml_vs_bayescode:
    input:
        codeml=expand(rules.codeml.output,CDS=RD_SAMPLE_LIST,template=TEMPLATES),
        bayescode=expand(rules.read_bayescode.output,CDS=RD_SAMPLE_LIST,model=["siteomega"],chain=[1]),
        script=f"{ROOT}/scripts/codeml_vs_bayescode.py"
    output:
        gene=f"{FOLDER}/results/codeml_vs_bayescode.gene.{{template}}.png",
        site=f"{FOLDER}/results/codeml_vs_bayescode.site.{{template}}.png"
    shell:
        "python3 {input.script} --codeml_folder {FOLDER}/{CODEML_FOLDER} --bayescode_folder {EXP_FOLDER} --pp 0.025 -o {FOLDER}/results/codeml_vs_bayescode"

rule gene_table:
    input:
        bayescode=expand(rules.read_bayescode.output,CDS=CDS_list,model=MODELS,chain=config['CHAINS']),
        script=f"{ROOT}/scripts/table_gene_omega.py"
    output:
        tsv=f"{FOLDER}/GeneTable.csv.gz"
    shell:
        "python3 {input.script} --div_folder {EXP_FOLDER} --xml {XML_FOLDER} --species Homo_sapiens Chlorocebus_sabaeus Bos_taurus Equus_caballus Ovis_aries Capra_hircus Canis_familiaris --output {output.tsv}"
