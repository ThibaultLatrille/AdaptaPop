import os
from ete3 import Tree
import pandas as pd
from Bio import SeqIO

configfile: 'config.yaml'

fasta_folder = "Datasets/omm_NT_fasta.v10c_116"
tree_folder = "Datasets/omm_RooTree.v10b_116"
experiment_folder = "Experiments"
bayescode_folder = "bayescode/_build"
CDS_list = list(sorted([i.replace(".fasta", "") for i in os.listdir(fasta_folder)]))[config['CDS_START_LIST']:config['CDS_END_LIST']]
MODELS = {"siteomega": "--omegashift 0.0 --freeomega --omegancat 30 --flatfitness",
          "sitemutsel": "--omegashift 0.0 --ncat 30"}
POINTS = config['POINTS']
BURN_IN = config['BURN_IN']

localrules: all, filter

rule all:
    input: expand(experiment_folder + "/{CDS}/{model}_{chain}.read", CDS=CDS_list, model=MODELS, chain=config['CHAINS'])

rule filter:
    input:
        fasta = fasta_folder + "/{CDS}.fasta",
        tree = tree_folder + "/{CDS}.rootree"
    output:
        ali = experiment_folder + "/{CDS}/placnr.ali",
        tree = experiment_folder + "/{CDS}/placnr.rootree"
    run:
        assert(os.path.isfile(input.tree))
        tree = Tree(input.tree)
        species_to_discard = [i.split("_")[0].lower() for i in list(pd.read_csv("taxlist.tsv", sep="\t")["Name"])]
        orthomam_species = tree.get_leaf_names()
        species_to_keep = [s for s in orthomam_species if s.split("_")[0].lower() not in species_to_discard]
        tree.prune(species_to_keep, preserve_branch_length=True)
        assert (len(tree.get_leaf_names()) == len(species_to_keep))
        tree.write(outfile=output.tree, format=1)

        fasta_seqs = SeqIO.parse(open(input.fasta, 'r'), 'fasta')
        ids_seqs = [(fasta.id, str(fasta.seq).replace("!", "-").replace("?", "-")) for fasta in fasta_seqs if fasta.id.split("_")[0].lower() not in species_to_discard]

        assert len(ids_seqs) == len(tree.get_leaf_names())
        ali_file = open(output.ali, 'w')
        ali_file.write(str(len(ids_seqs)) + " " + str(len(ids_seqs[0][1])) + "\n")
        ali_file.write("\n".join([" ".join(id_seq) for id_seq in ids_seqs]))
        ali_file.close()

rule run_bayescode:
    input:
        ali = experiment_folder + "/{CDS}/placnr.ali",
        tree = experiment_folder + "/{CDS}/placnr.rootree",
        bayescode = bayescode_folder + "/mutselomega",
        config = "config.yaml"
    output: touch(experiment_folder + "/{CDS}/{model}_{chain}.run")
    params:
        time="3-23:00", mem=1000, threads=1, queue="normal", name=lambda wildcards: wildcards.CDS,
        unzip = lambda wildcards, output: "gunzip {0}.chain.gz &&".format(output) if config['RESTART'] else "",
        cmd = lambda wildcards, input: "-a {0} -t {1} -u {2} {3}".format(input.ali, input.tree, POINTS, MODELS[wildcards.model]) if not config['RESTART'] else ""
    shell: "{params.unzip} {input.bayescode} {params.cmd} {output} && gzip -f {output}.chain"

rule inference:
    input: expand(experiment_folder + "/{CDS}/{model}_{chain}.run", CDS=CDS_list, model=MODELS, chain=config['CHAINS'])

rule read_bayescode:
    input:
        run = experiment_folder + "/{CDS}/{model}_{chain}.run",
        bayescode = bayescode_folder + "/readmutselomega"
    params:
        time="0-10:00", mem=1000, threads=1, queue="normal", name=lambda wildcards: wildcards.CDS,
        nuc=lambda wildcards, input: f"{input.bayescode} --every 1 --until {POINTS} --burnin {BURN_IN} --nuc {input.run}",
        ss=lambda wildcards, input: f"{input.bayescode} --every 1 --until {POINTS} --burnin {BURN_IN} --ss {input.run}",
        read=lambda wildcards, input: " && ".join([f'{input.bayescode} --every 1 --until {POINTS} --burnin {BURN_IN} {"--omega_0" if wildcards.model == "sitemutsel" else "" } -c {ci} {input.run}' for ci in [0.0, 0.25, 0.05, 0.025, 0.005, 0.0025]])
    output: touch(experiment_folder + "/{CDS}/{model}_{chain}.read")
    shell: "gunzip {input.run}.chain.gz && {params.read} && {params.ss} && gzip -f {input.run}.chain"