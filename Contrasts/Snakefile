import numpy
import os
import pandas as pd
from glob import glob

configfile: 'config.yaml'

ROOT = os.path.abspath('..')
FOLDER = os.path.abspath('.')
GRANULARITY = config['GRANULARITY']
SUBSAMPLING_SITES = config['SUBSAMPLING_SITES']
SUBSAMPLING_GENES = config['SUBSAMPLING_GENES']

NBR_REP = config['NBR_REP']
NBR_BATCHES = config['NBR_BATCHES']
SUBSAMPLING_WEIGHTED = config['SUBSAMPLING_WEIGHTED']

NBR_BINS = config['NBR_BINS']
NBR_REPETITIONS_PER_BIN = config['NBR_REPETITIONS_PER_BIN']

DFE_DICT = {"dfem": ROOT + '/utils/dfem/dfem',
            "grapes": ROOT + '/utils/grapes/grapes/grapes',
            "polyDFE": ROOT + '/utils/polyDFE/polyDFE-2.0-linux-64-bit'}
DFE_MODELS =  [DFE_DICT[m] for m in config['DFE_MODELS'] if m in DFE_DICT]
assert(len(DFE_MODELS) > 0)

BATCHES = range(1, NBR_BATCHES + 1)
REPLICATES = [item for sublist in [["ADAPTIVE_{0}".format(rep), "NEARLY_NEUTRAL_{0}".format(rep)] for rep in range(1, NBR_REP + 1)] for item in sublist]
BINS = list(range(1, NBR_BINS + 1))
REPETITIONS_PER_BIN = list(range(1, NBR_REPETITIONS_PER_BIN + 1))

PLOT_LIST = []
SPECIES = {}
for id, row in list(pd.read_csv(config["SAMPLE_LIST"], sep='\t').iterrows()):
    SPECIES[row["Species"]] = row["SisterSpecies"]
    for popu_path in glob(ROOT + '/Polymorphism/{0}/CDS.ANNOT.*.{1}.tsv.gz'.format(row["Species"], row["SampleName"])):
        for granularity in GRANULARITY:
            dir = "{0}-{1}-{2}".format(row["Species"], row["SampleName"], granularity)
            for model in config['DFE_MODELS']:
                for sfs in config['SFS']:
                    if NBR_BATCHES > 0:
                        PLOT_LIST.append(dir + "/histogram-{0}-{1}.pdf".format(model, sfs))
                    if NBR_BINS > 1:
                        PLOT_LIST.append(dir + "/bins-{0}-{1}.pdf".format(model, sfs))
            
        
localrules: all, annotation, plot_histogram, plot_scatter, plot_bins, ontology_table

rule all:
    input:
        PLOT_LIST,
        expand("scatterplot_{granularity}.pdf", granularity=GRANULARITY),
        expand("ontology/{granularity}_{epistasis}_table.pdf", epistasis=["epistasis", "adaptive"], granularity=GRANULARITY)

rule annotation:
    input:
        xml=ROOT + '/OrthoMam/Datasets/omm_markers',
        script=ROOT + '/scripts/annotation_ensg.py',
    output:
        tsv=FOLDER + "/annotation.{species}.tsv",
    shell:
        'python3 {input.script} --species {wildcards.species} --xml {input.xml} --output {output.tsv}'


rule generate_DoFE:
    input:
        vfc=lambda w: glob(ROOT + '/Polymorphism/{0}/CDS.ANNOT.*.{1}.tsv.gz'.format(w.species, w.popu)),
        ali_folder=ROOT + '/OrthoMam/Datasets/omm_NT_fasta.v10c_116',
        div_folder=ROOT + '/OrthoMam/Experiments',
        annotation=lambda w: FOLDER + "/annotation.{0}.tsv".format(w.species),
        script=ROOT + '/scripts/generate_DoFE.py',
        dfe=DFE_MODELS,
    params:
        time="2-00:00", mem=3000, threads=1, queue="normal", name=lambda w :"{0}-{1}-{2}-{3}".format(w.species, w.popu, w.granularity, w.batch),
        tmp_folder=lambda w: FOLDER + "/{0}-{1}-{2}/tmp/{3}/".format(w.species, w.popu, w.granularity, w.batch),
        output=lambda w: FOLDER + "/{0}-{1}-{2}/{3}/".format(w.species, w.popu, w.granularity, w.sfs),
        species=lambda w: "--focal_species {0} --sister_species {1} --sfs {2}".format(w.species, SPECIES[w.species], w.sfs)
    output:
        expand("{{species}}-{{popu}}-{{granularity}}/{{sfs}}/{{batch}}.txt")
    shell:
        'mkdir -p {params.tmp_folder} && mkdir -p {params.output} && python3 {input.script} --annotation {input.annotation} --dfe_path {input.dfe} --seed {wildcards.batch} --ali_folder {input.ali_folder} --div_folder {input.div_folder} --vcf {input.vfc} --granularity {wildcards.granularity} --rep {NBR_REP} --nbr_sites {SUBSAMPLING_SITES} --nbr_genes {SUBSAMPLING_GENES} --weighted {SUBSAMPLING_WEIGHTED} --output {params.output}{wildcards.batch} --tmp_folder {params.tmp_folder} {params.species}'

rule plot_histogram:
    input:
        dfe_res=expand("{{species}}-{{popu}}-{{granularity}}/{{sfs}}/{batch}.txt", batch=BATCHES),
        script=ROOT + '/scripts/plot_histogram.py'
    params:
        folder=lambda w: "--folder {0}-{1}-{2}/{3}".format(w.species, w.popu, w.granularity, w.sfs)
    output:
        plot="{species}-{popu}-{granularity}/histogram-{model}-{sfs}.pdf"
    shell:
        'python3 {input.script} {params.folder} --model {wildcards.model} --output {output.plot}'

rule generate_bins_DoFE:
    input:
        vfc=lambda w: glob(ROOT + '/Polymorphism/{0}/CDS.ANNOT.*.{1}.tsv.gz'.format(w.species, w.popu)),
        ali_folder=ROOT + '/OrthoMam/Datasets/omm_NT_fasta.v10c_116',
        div_folder=ROOT + '/OrthoMam/Experiments',
        annotation=lambda w: FOLDER + "/annotation.{0}.tsv".format(w.species),
        script=ROOT + '/scripts/generate_bins_DoFE.py',
        dfe=DFE_MODELS,
    params:
        time="4-00:00", mem=3000, threads=1, queue="normal", name=lambda w :"{0}-{1}-bins".format(w.species, w.popu),
        tmp_folder=lambda w: FOLDER + "/{0}-{1}-{2}/tmpBins/".format(w.species, w.popu, w.granularity),
        output=lambda w:  FOLDER + "/{0}-{1}-{2}/{3}Bins/".format(w.species, w.popu, w.granularity, w.sfs),
        species=lambda w: "--focal_species {0} --sister_species {1} --sfs {2}".format(w.species, SPECIES[w.species], w.sfs)
    output:
        directory("{species}-{popu}-{granularity}/{sfs}Bins")
    shell:
        'mkdir -p {params.tmp_folder} && mkdir -p {params.output} && python3 {input.script} --annotation {input.annotation} --dfe_path {input.dfe} --seed {NBR_BINS} --ali_folder {input.ali_folder} --div_folder {input.div_folder} --vcf {input.vfc} --granularity {wildcards.granularity} --rep {NBR_REPETITIONS_PER_BIN} --nbr_bins {NBR_BINS} --nbr_sites {SUBSAMPLING_SITES} --nbr_genes {SUBSAMPLING_GENES}  --output {params.output} --tmp_folder {params.tmp_folder} {params.species}'

rule plot_bins:
    input:
        dfe_res="{species}-{popu}-{granularity}/{sfs}Bins",
        script=ROOT + '/scripts/plot_bins.py'
    params:
        folder=lambda w: "--folder {0}-{1}-{2}/{3}Bins".format(w.species, w.popu, w.granularity, w.sfs)
    output:
        plot="{species}-{popu}-{granularity}/bins-{model}-{sfs}.pdf"
    shell:
        'python3 {input.script} {params.folder} --model {model} --output {output.plot}'

rule plot_scatter:
    input:
        folder=ROOT + '/OrthoMam/Experiments',
        script=ROOT + '/scripts/plot_scatter.py',
    output:
        plot="scatterplot_{granularity}.pdf"
    shell:
        'python3 {input.script} --folder {input.folder} --granularity {wildcards.granularity} --output {output.plot}'

rule ontology_table:
    input:
        folder=ROOT + '/OrthoMam/Experiments',
        xml=ROOT + '/OrthoMam/Datasets/omm_markers',
        script=ROOT + '/scripts/ontology_table.py',
    output:
        tex="ontology/{granularity}_{epistasis}_table.tex",
        pdf="ontology/{granularity}_{epistasis}_table.pdf"
    params:
        epistasis=lambda wildcards: True if wildcards.epistasis == 'epistasis' else False
    shell:
        'python3 {input.script} --folder {input.folder} --xml {input.xml} --granularity {wildcards.granularity} --epistasis {params.epistasis} --output {output.tex}'
