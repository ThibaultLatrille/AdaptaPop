import numpy
import os
import pandas as pd
from glob import glob

ROOT = os.path.abspath('..')
SPECIES = {'Chlorocebus_sabaeus': 'Macaca_mulatta'}
NBR_REP = 25
REPLICATES = [item for sublist in [["ADAPTIVE_{0}".format(rep), "NEARLY_NEUTRAL_{0}".format(rep)] for rep in range(1, NBR_REP + 1)] for item in sublist]
GRANULARITY = ["gene", "site"]
MODEL = "GammaExpo"
SUBSAMPLING_SITES = 50000
SUBSAMPLING_GENES = 150
SUBSAMPLING_WEIGHTED = True


def is_int(x):
    try:
        int(x)
        return True
    except ValueError:
        return False

PLOT_LIST = []
for sp in SPECIES:
    for pop_path in sorted(glob(ROOT + '/Polymorphism/{0}/CDS.ANNOT.*.vcf.gz'.format(sp))):
        pop_id = pop_path.split(".")[-3]
        if "chr" in pop_id or (pop_id in ["X", "Y", "MT"]) or is_int(pop_id): continue
        for granularity in GRANULARITY:
            dir = "{0}_{1}_{2}".format(sp, pop_id, granularity)
            os.makedirs(dir + "/DoFE", exist_ok=True)
            os.makedirs(dir + "/tmp", exist_ok=True)
            PLOT_LIST.append(dir + "/histogram.pdf")
        break

localrules: all, generate_DoFE, plot_histogram, plot_scatter

rule all:
    input:
        PLOT_LIST,
        expand("scatterplot_{granularity}.pdf", granularity=GRANULARITY),
         expand("ontology_{epistasis}_table.pdf", epistasis=["epistasis", "adaptive"])

rule generate_DoFE:
    input:
        vfc=lambda w: glob(ROOT + '/Polymorphism/{0}/*.{1}.vcf.gz'.format(w.species, w.pop, w.granularity)),
        ali_folder=ROOT + '/OrthoMam/Datasets/omm_NT_fasta.v10c_116',
        div_folder=ROOT + '/OrthoMam/Experiments',
        script=ROOT + '/scripts/generate_DoFE.py',
    params:
        tmp_folder=lambda w: "--tmp_folder {0}_{1}_{2}/tmp".format(w.species, w.pop, w.granularity),
        output=lambda w: "--output {0}_{1}_{2}/DoFE".format(w.species, w.pop, w.granularity),
        species=lambda w: "--focal_species {0} --sister_species {1}".format(w.species, SPECIES[w.species])
    output:
        expand("{{species}}_{{pop}}_{{granularity}}/DoFE/{rep}.txt", rep=REPLICATES)
    shell:
        'python3 {input.script} --ali_folder {input.ali_folder} --div_folder {input.div_folder} --vcf {input.vfc} --granularity {wildcards.granularity} --rep {NBR_REP} --nbr_sites {SUBSAMPLING_SITES} --nbr_genes {SUBSAMPLING_GENES} --weighted {SUBSAMPLING_WEIGHTED}  {params.species} {params.tmp_folder} {params.output}'

rule run_dfem:
    input:
        dfem=ROOT + '/utils/dfem/dfem',
        DoFE="{species}_{pop}_{granularity}/DoFE/{rep}.txt"
    output: "{species}_{pop}_{granularity}/DoFE/{rep}.csv"
    params:
        time="0-1:00", mem=1000, threads=1, queue="normal",
        name=lambda w: "{0}_{1}_{2}_rep{3}".format(w.species, w.pop, w.granularity, w.rep),
    shell:
        '{input.dfem} -in {input.DoFE} -out {output} -model {MODEL}'

rule plot_histogram:
    input:
        dfem_res=expand("{{species}}_{{pop}}_{{granularity}}/DoFE/{rep}.csv", rep=REPLICATES),
        script=ROOT + '/scripts/plot_histogram.py'
    params:
        folder=lambda w: "--folder {0}_{1}_{2}/DoFE".format(w.species, w.pop, w.granularity)
    output:
        plot="{species}_{pop}_{granularity}/histogram.pdf"
    shell:
        'python3 {input.script} {params.folder} --model {MODEL} --output {output.plot}'

rule plot_scatter:
    input:
        folder=ROOT + '/OrthoMam/Experiments',
        script=ROOT + '/scripts/plot_scatter.py',
    output:
        plot="scatterplot_{granularity}.pdf"
    shell:
        'python3 {input.script} --folder {input.folder} --granularity {wildcards.granularity} --output {output.plot}'

rule ontology_table:
    input:
        folder=ROOT + '/OrthoMam/Experiments',
        xml=ROOT + '/OrthoMam/Datasets/omm_markers',
        script=ROOT + '/scripts/ontology_table.py',
    output:
        tex="ontology_{epistasis}_table.tex",
        pdf="ontology_{epistasis}_table.pdf"
    params:
        epistasis=lambda wildcards: True if wildcards.epistasis == 'epistasis' else False
    shell:
        'python3 {input.script} --folder {input.folder} --xml {input.xml} --epistasis {params.epistasis} --output {output.tex}'
