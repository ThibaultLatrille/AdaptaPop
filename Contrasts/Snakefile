import os
import pandas as pd
from glob import glob
from snakemake.io import expand, touch

configfile: 'config.yaml'

ROOT = os.path.abspath('..')
FOLDER = os.path.abspath('.')
ANALYSIS_FOLDER = FOLDER + "/analysis_" + config["SAMPLE_LIST"].replace(".tsv", "")
GRANULARITY = config['GRANULARITY']
SUBSAMPLING_SITES = config['SUBSAMPLING_SITES']
SUBSAMPLING_GENES = config['SUBSAMPLING_GENES']

NBR_BATCHES = config['NBR_BATCHES']
NBR_REPLICATES_PER_BATCH = config['NBR_REPLICATES_PER_BATCH']
SUBSAMPLING_WEIGHTED = config['SUBSAMPLING_WEIGHTED']

DFE_DICT = {"dfem": ROOT + '/utils/dfem/dfem',
            "grapes": ROOT + '/utils/grapes/grapes/grapes',
            "polyDFE": ROOT + '/utils/polyDFE/polyDFE-2.0-linux-64-bit'}
DFE_MODELS = [DFE_DICT[m] for m in config['DFE_MODELS'] if m in DFE_DICT]

BATCHES = range(1,NBR_BATCHES + 1)

HIST_LIST = []
SPECIES_SISTER_K, SUBSAMPlE_SFS = {}, {}

for id, row in list(pd.read_csv(config["SAMPLE_LIST"],sep='\t').iterrows()):
    SPECIES_SISTER_K[row["Species"]] = row["SisterSpecies"]
    SPECIES_SISTER_K[row["SampleName"]] = row["k"]
    for popu_path in glob(ROOT + '/Polymorphism/{0}/CDS.ANNOT.*.{1}.tsv.gz'.format(row["Species"],row["SampleName"])):
        for granularity in GRANULARITY:
            dir = "{0}-{1}-{2}".format(row["Species"],row["SampleName"],granularity)
            for model in config['DFE_MODELS']:
                for sfs in config['SFS']:
                    if (model == "polyDFE" or model == "MK" or model == "aMK") and sfs == "folded": continue
                    if NBR_BATCHES > 0:
                        HIST_LIST.append(dir + "/histogram-{0}-{1}.tsv".format(model,sfs))

localrules: all,pickle,parse_results,parse_results_gathered,plot_heatmap,plot_violin,plot_scatter,table_ontology

rule all:
    input:
        ANALYSIS_FOLDER + "/results.tex",
        ANALYSIS_FOLDER + "/violin_plot",
        expand("scatterplot_{granularity}.pdf",granularity=GRANULARITY),
        #"ontology/gene_adaptive_table.pdf","ontology/gene_epistasis_table.pdf",
        #"ontology/site_adaptive_table.pdf","ontology/site_epistasis_table.pdf","ontology/site_strongly-adaptive_table.pdf"

rule pickle:
    input:
        ali_folder=ROOT + '/OrthoMam/Datasets/omm_NT_fasta.v10c_116',
        div_folder=ROOT + '/OrthoMam/Experiments',
        xml=ROOT + '/OrthoMam/Datasets/omm_markers'
    output:
        tsv=FOLDER + "/pickle.{species}.{granularity}.pk1.bz2"
    params:
        script=ROOT + '/scripts/annotation_ensg.py',
        species=lambda wildcards: "--focal_species {0} --sister_species {1}".format(wildcards.species, SPECIES_SISTER_K[wildcards.species])
    shell:
        'python3 {params.script} {params.species} --granularity {wildcards.granularity} --ali_folder {input.ali_folder} --div_folder {input.div_folder} --xml {input.xml} --output {output.tsv}'

rule generate_DoFE:
    input:
        tsv=lambda wildcards: glob(ROOT + '/Polymorphism/{0}/CDS.ANNOT.*.{1}.tsv.gz'.format(wildcards.species,wildcards.popu)),
        pickle=lambda wildcards: FOLDER + "/pickle.{0}.{1}.pk1.bz2".format(wildcards.species,wildcards.granularity),
    params:
        dfe=f"--dfe_path {' '.join(DFE_MODELS)}" if len(DFE_MODELS) > 0 else "",
        script=ROOT + '/scripts/generate_DoFE.py',
        time="2-00:00",mem=3000,threads=1,queue="normal",name=lambda wildcards: "{0}-{1}-{2}-{3}".format(wildcards.species,wildcards.popu,wildcards.granularity,wildcards.batch),
        tmp_folder=lambda wildcards: FOLDER + "/{0}-{1}-{2}/tmp/{3}/".format(wildcards.species,wildcards.popu,wildcards.granularity,wildcards.batch),
        output=lambda wildcards: FOLDER + "/{0}-{1}-{2}/{3}/".format(wildcards.species,wildcards.popu,wildcards.granularity,wildcards.sfs),
        species=lambda wildcards: "--focal_species {0} --sister_species {1} --sfs {2} --subsample {3}".format(wildcards.species, SPECIES_SISTER_K[wildcards.species],wildcards.sfs,SPECIES_SISTER_K[wildcards.popu])
    output:
        touch("{species}-{popu}-{granularity}/{sfs}/{batch}.txt")
    shell:
        'mkdir -p {params.tmp_folder} && mkdir -p {params.output} && python3 {params.script} --pickle {input.pickle} {params.dfe} --seed {wildcards.batch} --vcf {input.tsv} --granularity {wildcards.granularity} --rep {NBR_REPLICATES_PER_BATCH} --nbr_sites {SUBSAMPLING_SITES} --nbr_genes {SUBSAMPLING_GENES} --weighted {SUBSAMPLING_WEIGHTED} --output {params.output}{wildcards.batch} --tmp_folder {params.tmp_folder} {params.species}'

rule parse_results:
    input:
        dfe_res=expand("{{species}}-{{popu}}-{{granularity}}/{{sfs}}/{batch}.txt",batch=BATCHES),
        script=ROOT + '/scripts/parse_results.py'
    params:
        script=ROOT + '/scripts/parse_results.py',
        folder=lambda wildcards: "--folder {0}-{1}-{2}/{3}".format(wildcards.species,wildcards.popu,wildcards.granularity,wildcards.sfs)
    output:
        plot="{species}-{popu}-{granularity}/histogram-{model}-{sfs}.tsv"
    shell:
        'python3 {params.script} {params.folder} --model {wildcards.model} --output {output.plot}'

rule parse_results_gathered:
    input:
        tsv=HIST_LIST,
        script=ROOT + '/scripts/parse_results_gathered.py'
    output:
        tsv=ANALYSIS_FOLDER + "/results.tsv"
    shell:
        'mkdir -p {ANALYSIS_FOLDER} && python3 {input.script} --tsv {input.tsv} --output {ANALYSIS_FOLDER}'

rule plot_violin:
    input:
        tsv=HIST_LIST,
        script=ROOT + '/scripts/plot_violin.py'
    output:
        tsv=touch(ANALYSIS_FOLDER + "/violin_plot")
    shell:
        'mkdir -p {ANALYSIS_FOLDER}/ViolinPlot && python3 {input.script} --tsv {input.tsv} --output {ANALYSIS_FOLDER}/ViolinPlot'


rule plot_heatmap:
    input:
        sample_list=FOLDER + "/" + config["SAMPLE_LIST"],
        violin=ANALYSIS_FOLDER + "/violin_plot",
        tsv=ANALYSIS_FOLDER + "/results.tsv",
        script=ROOT + '/scripts/plot_heatmap.py'
    output: ANALYSIS_FOLDER + "/results.tex"
    shell: 'cp -f main-table.tex {ANALYSIS_FOLDER}/ && python3 {input.script} --tsv {input.tsv} --sample_list {input.sample_list} --output {output}'

rule plot_scatter:
    input:
        folder=ROOT + '/OrthoMam/Experiments',
        script=ROOT + '/scripts/plot_scatter.py'
    output:
        plot="scatterplot_{granularity}.pdf"
    shell:
        'python3 {input.script} --folder {input.folder} --granularity {wildcards.granularity} --output {output.plot}'

rule table_ontology:
    input:
        folder=ROOT + '/OrthoMam/Experiments',
        xml=ROOT + '/OrthoMam/Datasets/omm_markers',
        script=ROOT + '/scripts/table_ontology.py'
    output:
        tex="ontology/{granularity}_{category}_table.tex",
        pdf="ontology/{granularity}_{category}_table.pdf"
    shell:
        'python3 {input.script} --folder {input.folder} --xml {input.xml} --granularity {wildcards.granularity} --category {wildcards.category} --output {output.tex}'
