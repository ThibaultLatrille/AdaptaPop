from ftplib import FTP
import os
import pandas as pd

configfile: 'config.yaml'

NAME = config['SPECIES'] + "." + config['ASSEMBLY']
ROOT = os.path.abspath('../..')
ftp = FTP(config['FTP'])
ftp.login()
vfc_dico = {}
for analysis in ftp.nlst(config['STUDY']):
    for file_path in ftp.nlst(analysis):
        file = file_path.split('/')[-1]
        if file.endswith('vcf.gz') and (config['CONTAINS'] in file) and (config['CONTAINS_PREFIX'] in file):
            key_vcf = file.replace(config['CONTAINS_PREFIX'],'').replace(config['CONTAINS'],'').replace('.vcf.gz','')
            key_vcf = key_vcf.split('.')[0]
            vfc_dico[key_vcf] = file_path

POPULATIONS = set(pd.read_csv(config["PANEL"],sep='\t')["pop"]) if 'PANEL' in config else False
LIFTOVER = 'liftover_source.vcf.gz' in config["DOWNLOAD"] and 'liftover_target.vcf.gz' in config["DOWNLOAD"]

rule all:
    input:
        expand('CDS.ANNOT.' + NAME + '.{subset}.tsv.gz',subset=POPULATIONS if POPULATIONS else list(vfc_dico.keys())),
        expand('dl.{filename}', filename=config["DOWNLOAD"].keys())

rule download:
    priority: 50
    output: 'dl.{filename}'
    params: lambda wildcards: config["DOWNLOAD"][wildcards.filename]
    shell:
        "wget -c {params} -O {output}"

rule gtf_to_bed:
    priority: 50
    input:
        gtf_gz=f"dl.{NAME}.gtf.gz",
        gtf_to_bed=ROOT + '/scripts/gtf_to_bed.py'
    output:
        bed=NAME + '.bed',
        sorted_bed=NAME + '.sorted.bed',
        merged_bed=NAME + '.merged.bed'
    params:
        chr_prefix=config['CHR_PREFIX'] if 'CHR_PREFIX' in config else "",
        chr2acc='--chr2acc ' + config['CHR2ACC'] if 'CHR2ACC' in config else ""
    shell:
        "python3 {input.gtf_to_bed} --gtf {input.gtf_gz} {params.chr2acc} --chr_prefix \"{params.chr_prefix}\" --output {output.bed} && bedtools sort -i {output.bed} > {output.sorted_bed} && bedtools merge -i {output.sorted_bed} -c 4 -o distinct > {output.merged_bed}"

rule download_vcf:
    output: (config['SPECIES'] + config['CONTAINS'] + '.{subset}.vcf.gz') if LIFTOVER else (NAME + '.{subset}.vcf.gz')
    params: lambda wildcards: config['FTP'] + vfc_dico[wildcards.subset]
    shell:
        "wget -c {params} -O {output}"

if LIFTOVER:
    rule lift_over_vcf:
        priority: 50
        input:
            vcf=config['SPECIES'] + config['CONTAINS'] + '.{subset}.vcf.gz',
            source='dl.liftover_source.vcf.gz',
            target='dl.liftover_target.vcf.gz',
            script_liftover=ROOT + '/scripts/vcf_liftover.py'
        output: NAME + '.{subset}.vcf.gz'
        shell:
            'python3 {input.script_liftover} --target {input.target} --source {input.source} --vcf {input.vcf} --output {output}'

rule intersect:
    priority: 50
    input:
        vfc_gz=rules.lift_over_vcf.output if LIFTOVER else rules.download_vcf.output,
        bed=rules.gtf_to_bed.output.merged_bed
    output:
        vfc='CDS.' + NAME + '.{subset}.vcf'
    shell:
        'bedtools intersect -a {input.vfc_gz} -b {input.bed} -wb -header > {output.vfc}'

rule zip:
    priority: 50
    input:
        vfc_cds=rules.intersect.output.vfc
    output: 'CDS.' + NAME + '.{subset}.vcf.gz'
    shell:
        'gzip -k {input.vfc_cds}'

rule annotate_vcf:
    input:
        vfc_gz=rules.zip.output,
        gtf_gz=f"dl.{NAME}.gtf.gz",
        fa_gz=f"dl.{NAME}.fa.gz",
        ali_folder=ROOT + '/OrthoMam/Datasets/omm_NT_fasta.v10c_116/',
        tree_folder=ROOT + '/OrthoMam/Datasets/omm_RooTree.v10b_116/',
        xml_folder=ROOT + '/OrthoMam/Datasets/omm_markers',
        script_vcf=ROOT + '/scripts/vcf_annotate_positions.py'
    params:
        specie=config["SPECIES"],
        chr2acc='--chr2acc ' + config['CHR2ACC'] if 'CHR2ACC' in config else ""
    output:
        vfc_gz='CDS.ANNOT.' + NAME + '.{subset}.vcf.gz'
    shell:
        'python3 {input.script_vcf} --gtf {input.gtf_gz} --fasta {input.fa_gz} --vcf {input.vfc_gz} --ali {input.ali_folder} --tree {input.tree_folder} --xml {input.xml_folder} --specie {params.specie} {params.chr2acc} --output {output.vfc_gz}'

if POPULATIONS:
    rule chr_to_pop:
        input:
            vcf=expand(rules.annotate_vcf.output.vfc_gz, subset=list(vfc_dico.keys())),
            panel=config["PANEL"],
            script=ROOT + '/scripts/vcf_chr_to_pop.py'
        params:
            output='CDS.ANNOT.' + NAME + '.POPULATION.vcf.gz'
        output:
            vcf_pop=expand(rules.annotate_vcf.output.vfc_gz, subset=POPULATIONS)
        shell:
            'python3 {input.script} --panel {input.panel} --vcf {input.vcf} --output {params.output}'

rule est_sfs:
    input:
        vcf=rules.chr_to_pop.output.vcf_pop if POPULATIONS else rules.annotate_vcf.output.vfc_gz,
        script=ROOT + '/scripts/est_sfs.py',
        est_exec=ROOT + '/utils/est-sfs-release-2.03/est-sfs',
        est_config=ROOT + '/utils/est-sfs-release-2.03/config-rate6.txt',
        est_seed=ROOT + '/utils/est-sfs-release-2.03/seedfile.txt'
    params:
        vcf=lambda wildcards: 'CDS.ANNOT.' + NAME + f'.{wildcards.subset}.vcf.gz'
    output:
        tsv='CDS.ANNOT.' + NAME + '.{subset}.tsv.gz'
    shell:
        'python3 {input.script} --vcf {params.vcf} --output {output.tsv} --exec {input.est_exec} --config {input.est_config} --seed {input.est_seed}'
