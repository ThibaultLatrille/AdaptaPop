from ftplib import FTP
import numpy
import os
import pandas as pd

configfile: 'config.yaml'

NAME = config['SPECIES'] + "." + config['ASSEMBLY']
ftp = FTP(config['FTP'])
ftp.login()
vfc_dico = {}
for analysis in ftp.nlst(config['STUDY']):
    for file_path in ftp.nlst(analysis):
        file = file_path.split('/')[-1]
        if file.endswith('vcf.gz') and config['CONTAINS'] in file:
            vfc_dico[file.replace('ALL.', '').replace(config['CONTAINS'], '').replace('.vcf.gz', '').split('.')[0]] = file_path

ftp_ensembl = FTP('ftp.ensembl.org')
ftp_ensembl.login()

GTF = '{0}.{1}'.format(NAME, config['ENSEMBL_RELEASE'])
FASTA = '{0}.cds.all.fa.gz'.format(NAME)
ROOT = os.path.abspath('../..')

POPULATIONS = set(pd.read_csv(config["PANEL"], sep='\t')["pop"]) if 'PANEL' in config else False

rule all:
    input:
        expand('CDS.ANNOT.' + NAME + '.{subset}.tsv.gz', subset=POPULATIONS if POPULATIONS else list(vfc_dico.keys())),
        # 'CDS.SELCOEFF.' + NAME + '.tsv.gz'


rule download_fasta:
    output:
        fa_gz=FASTA
    run:
        with open(output.fa_gz, 'wb') as fa_gz:
            ftp_ensembl.retrbinary('RETR /pub/release-{0}/fasta/{1}/cds/{2}'.format(config['ENSEMBL_RELEASE'], config['SPECIES'], output.fa_gz), fa_gz.write)

rule download_gtf:
    output:
        gtf_gz=GTF + '.gtf.gz'
    run:
        with open(output.gtf_gz, 'wb') as gtf_gz:
            ftp_ensembl.retrbinary('RETR /pub/release-{0}/gtf/{1}/{2}'.format(config['ENSEMBL_RELEASE'], config['SPECIES'], output.gtf_gz), gtf_gz.write)


rule gtf_to_bed:
    input:
        gtf_gz=GTF + '.gtf.gz',
        gtf_to_bed=ROOT + '/scripts/gtf_to_bed.py'
    output:
        bed=GTF + '.bed',
        sorted_bed=GTF + '.sorted.bed',
        merged_bed=GTF + '.merged.bed',
    shell:
        'python3 {input.gtf_to_bed} --gtf {input.gtf_gz} && bedtools sort -i {output.bed} > {output.sorted_bed} && bedtools merge -i {output.sorted_bed} -c 4 -o distinct > {output.merged_bed}'

rule download_vcf:
    output:
        vfc_gz=(config['SPECIES'] + config['CONTAINS'] + '.{subset}.vcf.gz') if 'LIFT_OVER' in config else (NAME + '.{subset}.vcf.gz')
    run:
        with open(output.vfc_gz, 'wb') as vfc_gz:
            ftp.retrbinary('RETR ' + vfc_dico[wildcards.subset], vfc_gz.write)

if 'LIFT_OVER' in config:
    rule lift_over_vcf:
        input:
            vfc_gz=config['SPECIES'] + config['CONTAINS'] + '.{subset}.vcf.gz',
            chain=config['LIFT_OVER'],
            ref_genome=config['REF_GENOME']
        output:
            vfc_gz=NAME + '.{subset}.vcf.gz'
        shell:
            'CrossMap.py vcf {input.chain} {input.vfc_gz} {input.ref_genome} {output.vfc_gz} --compress'

rule intersect:
    input:
        vfc_gz=NAME + '.{subset}.vcf.gz',
        bed=GTF + '.merged.bed'
    output:
        vfc='CDS.' + NAME + '.{subset}.vcf'
    shell:
        'bedtools intersect -a {input.vfc_gz} -b {input.bed} -wb -header > {output.vfc}'

rule zip:
    input:
        vfc_cds='CDS.' + NAME + '.{subset}.vcf',
        vfc_gz=NAME + '.{subset}.vcf.gz'
    output: 'CDS.' + NAME + '.{subset}.vcf.gz'
    shell:
        'gzip -k {input.vfc_cds} && rm -rf {input.vfc_cds} && rm -rf {input.vfc_gz}'

rule annotate_vcf:
    input:
        vfc_gz='CDS.' + NAME + '.{subset}.vcf.gz',
        gtf_gz=GTF + '.gtf.gz',
        fa_gz=FASTA,
        ali_folder=ROOT + '/OrthoMam/Datasets/omm_NT_fasta.v10c_116/',
        tree_folder=ROOT + '/OrthoMam/Datasets/omm_RooTree.v10b_116/',
        xml_folder=ROOT + '/OrthoMam/Datasets/omm_markers',
        script_vcf=ROOT + '/scripts/vcf_annotate_positions.py'
    params:
        specie = config["SPECIES"]
    output:
        vfc_gz='CDS.ANNOT.' + NAME + '.{subset}.vcf.gz'
    shell:
        'python3 {input.script_vcf} --gtf {input.gtf_gz} --fasta {input.fa_gz} --vcf {input.vfc_gz} --ali {input.ali_folder} --tree {input.tree_folder} --xml {input.xml_folder} --specie {params.specie} --output {output.vfc_gz}'

rule selcoeff:
    input:
        vcf=expand('CDS.ANNOT.' + NAME + '.{subset}.vcf.gz', subset=list(vfc_dico.keys())),
        script=ROOT + '/scripts/est_sfs.py',
        est_exec=ROOT + '/utils/est-sfs-release-2.03/est-sfs',
        est_config=ROOT + '/utils/est-sfs-release-2.03/config-rate6.txt',
        est_seed=ROOT + '/utils/est-sfs-release-2.03/seedfile.txt',
        exp_folder=ROOT + '/OrthoMam/Experiments/',
    output:
        tsv='CDS.SELCOEFF.' + NAME + '.tsv.gz',
    shell:
        'python3 {input.script} --vcf {input.vcf} --exp_folder {input.exp_folder} --output {output.tsv} --exec {input.est_exec} --config {input.est_config} --seed {input.est_seed}'

if POPULATIONS:
    rule chr_to_pop:
        input:
            vcf=expand('CDS.ANNOT.' + NAME + '.{subset}.vcf.gz', subset=list(vfc_dico.keys())),
            panel=config["PANEL"],
            script=ROOT + '/scripts/vcf_chr_to_pop.py'
        params:
            output='CDS.ANNOT.' + NAME + '.POPULATION.vcf.gz',
        output:
            vcf_pop=expand('CDS.ANNOT.' + NAME + '.{subset}.vcf.gz', subset=POPULATIONS),
        shell:
            'python3 {input.script} --panel {input.panel} --vcf {input.vcf} --output {params.output}'

rule est_sfs:
    input:
        vcf='CDS.ANNOT.' + NAME + '.{subset}.vcf.gz',
        script=ROOT + '/scripts/est_sfs.py',
        est_exec=ROOT + '/utils/est-sfs-release-2.03/est-sfs',
        est_config=ROOT + '/utils/est-sfs-release-2.03/config-rate6.txt',
        est_seed=ROOT + '/utils/est-sfs-release-2.03/seedfile.txt',
    output:
        tsv='CDS.ANNOT.' + NAME + '.{subset}.tsv.gz',
    shell:
        'python3 {input.script} --vcf {input.vcf} --output {output.tsv} --exec {input.est_exec} --config {input.est_config} --seed {input.est_seed}'